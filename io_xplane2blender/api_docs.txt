Title: Introduction

Welcome to the XPlane2Blender API Documentation.

These pages contain the semi-automaticly generated Sourcecode documentation of the XPlane2Blender 3.2x Blender addon.
This addon is used to export Objects from Blender 2.5x (www.blender3d.org) to the flight simulator X-Plane.


Topic: How it works
The next paragraphs explain how this addon basically works, so new developers get a quick insight and can start digging deeper into the process and maybe make it better.

For an addon to work in blender the file <__init__.py> is needed. This file ensures python recognizes the folder "io_xplane2blender" (where it is located) as a "module".
Blender scans for new "modules" and reads out the variable "bl_info" from the <__init__.py> which contains information about the addon.
If everything went fine the addon can be enabled from witin blender using a register() function and disabled using a unregister() function. Both are located in the <__init__.py>.

The addon registers so called "Operators" in Blender. Operators in Blender are "global" functions perfoming differenct actions. They work in context with currently active data as all in Blender works in "context".
The Operator the addon registers first is the <ExportXPlane9> class located in <xplane_export.py>. This class invokes the exporting process.
Together with this operator a lot of other operators are registered, but those are not important at this point.

When the <ExportXPlane9> Operator is called by the user, either by calling it directly via python or by clicking the "Export X-Plane OBJ" Entry under Files>Export the Export process runs through.
This looks as follows:

    1. - The export path is beeing retrieved (either a user defined directory comming from a file select window or the directory of the current blend file).
    2. - The Blender scene is reset to frame 1 so all animations are in initial state.
    3. - <XPlaneData> is instanciated and <XPlaneData.collect> is called to collect all Objects from all active scenes and create new data types out of it. Those data types are defined in <xplane_types.py>. These data types do one thing: They convert Blender data structures to data structures we can use to iterate through and easily generate an OBJ-file from.
    4. - <XPlaneData> fills <XPlaneData.files> with all files that will be exported. Files are generated one per Blender layer. The next steps show what happens with each file defined in <XPlaneData.files>.
    5. - An instance of <XPlaneMesh> creates the vertex and indices tables in the OBJ file out of all meshes (<XPlanePrimitive>) in the file.
    6. - An instance of <XPlaneLights> creates the light table in the OBJ file out of all lights (<XPlaneLight>) in the file.
    7. - An instance of <XPlaneHeader> creates the OBJ file header using settings from the current <XPlaneLayer> and <XPlaneMesh>.
    8. - An instance of <XPlaneCommands> creates the OBJ file commands table using all the previously collected and created data.
    9. - All OBJ tables are written to the file and we continue with the next file from step 5.

